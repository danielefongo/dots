---@diagnostic disable: undefined-global

local colors = {
  unknown = "#ff0000",
  strong_blue = "{{ colors.blue | stronger }}",
  strong_green = "{{ colors.green | stronger }}",
  strong_red = "{{ colors.red | stronger }}",
  strong_yellow = "{{ colors.yellow | stronger }}",
  dark_red = "{{ colors.red | darken }}",
  red = "{{ colors.red }}",
  light_red = "{{ colors.red | lighten }}",
  orange = "{{ colors.orange }}",
  dark_green = "{{ colors.green | darken }}",
  green = "{{ colors.green }}",
  light_green = "{{ colors.green | lighten }}",
  dark_yellow = "{{ colors.yellow | darken }}",
  yellow = "{{ colors.yellow }}",
  light_yellow = "{{ colors.yellow | lighten }}",
  dark_blue = "{{ colors.blue | darken }}",
  blue = "{{ colors.blue }}",
  light_blue = "{{ colors.blue | lighten }}",
  dark_magenta = "{{ colors.magenta | darken }}",
  magenta = "{{ colors.magenta }}",
  light_magenta = "{{ colors.magenta | lighten }}",
  dark_cyan = "{{ colors.cyan | darken }}",
  cyan = "{{ colors.cyan }}",
  light_cyan = "{{ colors.cyan | lighten }}",
  background = "{{ colors.background }}",
  background_alt1 = "{{ colors.background_alt1 }}",
  background_alt2 = "{{ colors.background_alt2 }}",
  grey1 = "{{ colors.grey1 }}",
  grey2 = "{{ colors.grey2 }}",
  grey3 = "{{ colors.grey3 }}",
  grey4 = "{{ colors.grey4 }}",
  grey5 = "{{ colors.grey5 }}",
  grey6 = "{{ colors.grey6 }}",
  grey7 = "{{ colors.grey7 }}",
  grey8 = "{{ colors.grey8 }}",
  grey9 = "{{ colors.grey9 }}",
  foreground = "{{ colors.foreground }}",
}

local syntax = {
  special = "{{ syntax.special }}",
  statement = "{{ syntax.statement }}",
  ["function"] = "{{ syntax.function }}",
  variable = "{{ syntax.variable }}",
  include = "{{ syntax.include }}",
  keyword = "{{ syntax.keyword }}",
  struct = "{{ syntax.struct }}",
  string = "{{ syntax.string }}",
  identifier = "{{ syntax.identifier }}",
  field = "{{ syntax.field }}",
  parameter = "{{ syntax.parameter }}",
  property = "{{ syntax.property }}",
  punctuation = "{{ syntax.punctuation }}",
  constructor = "{{ syntax.constructor }}",
  operator = "{{ syntax.operator }}",
  preproc = "{{ syntax.preproc }}",
  constant = "{{ syntax.constant }}",
  tag = "{{ syntax.tag }}",
  todo_fg = "{{ syntax.todo }}",
  todo_bg = "{{ colors.grey1 }}",
  number = "{{ syntax.number }}",
  comment = "{{ syntax.comment }}",
  type = "{{ syntax.type }}",
  conditional = "{{ syntax.conditional }}",
  macro = "{{ syntax.macro }}",
}

local lush = function()
  local lush = require("lush")

  return lush(function(injected_functions)
    local sym = injected_functions.sym
    return {
      Unknown({ fg = colors.unknown }),
      NvimInternalError({ fg = colors.foreground, bg = colors.strong_red }),

      Error({ fg = colors.strong_red }),
      Warning({ fg = colors.orange }),
      Hint({ fg = colors.magenta }),
      Information({ fg = colors.green }),

      NonText({ fg = colors.grey8 }),
      Text({ fg = colors.foreground }),
      Normal({ bg = colors.background, fg = colors.foreground }),
      NormalFloat({ bg = colors.background_alt2, fg = colors.foreground }),
      FloatBorder({ bg = colors.background }),
      FloatShadow({ bg = colors.background }),
      FloatShadowThrough({ bg = colors.background }),
      Visual({ bg = colors.grey2 }),
      WinSeparator({ fg = colors.grey6 }),
      SignColumn({ fg = colors.grey6 }),
      ColorColumn({ SignColumn }),
      CursorColumn({ SignColumn }),
      LineNr({ fg = colors.grey2 }),
      Cursor({ bg = colors.foreground, fg = colors.background }),
      CursorLine({ bg = colors.background }),
      CursorLineNr({ bg = colors.background, gui = "bold" }),
      File({ fg = colors.foreground }),
      Directory({ fg = colors.cyan }),
      CurSearch({ bg = colors.yellow, fg = colors.background }),
      Search({ bg = colors.cyan, fg = colors.background }),
      Folded({ bg = colors.background_alt2, fg = colors.grey6 }),
      Title({ Text, gui = "bold" }),
      Delimiter({ fg = colors.grey7 }),
      StatusLine({ bg = colors.background_alt2, fg = colors.yellow, gui = "reverse" }),
      StatusLineNC({ bg = colors.background_alt2, fg = colors.grey6 }),
      Conceal({ fg = colors.grey6 }),
      MatchParen({ bg = colors.foreground, gui = "bold" }),
      WinBar({ fg = colors.grey8 }),
      WinBarNC({ WinBar }),
      SpecialKey({ fg = colors.grey4 }),
      Pmenu({ bg = colors.background_alt2 }),
      PmenuSel({ bg = colors.grey2 }),
      PmenuThumb({ bg = colors.cyan }),
      QuickFixLine({ fg = colors.blue }),
      TabLine({ bg = colors.background }),
      TabLineSel({ bg = colors.blue, fg = colors.background }),
      TabLineFill({ bg = colors.background_alt1 }),
      ModeMsg({ fg = colors.yellow }),
      MoreMsg({ fg = colors.foreground }),
      ErrorMsg({ Error }),
      Question({ fg = colors.cyan }),
      WarningMsg({ Warning }),

      Added({ fg = colors.green }),
      Changed({ fg = colors.yellow }),
      Removed({ fg = colors.red }),
      DiffAdd({ Added }),
      DiffChange({ Changed }),
      DiffDelete({ Removed }),
      DiffText({ Text }),

      Todo({ fg = colors.grey6, gui = "bold" }),
      Identifier({ fg = syntax.identifier }),
      Special({ fg = syntax.special }),
      Operator({ fg = syntax.operator }),
      PreProc({ fg = syntax.preproc }),
      Constant({ fg = syntax.constant }),
      sym("@constant.builtin")({ Constant }),
      Boolean({ Constant }),
      Number({ Constant }),
      Comment({ fg = syntax.comment }),
      Statement({ fg = syntax.statement }),
      Exception({ Statement }),
      Label({ Statement }),
      Keyword({ fg = syntax.keyword, gui = "italic" }),
      Conditional({ Keyword }),
      Field({ fg = syntax.field }),
      sym("@field")({ Field }),
      Function({ fg = syntax["function"] }),
      sym("@function.call")({ Function }),
      sym("@function.builtin")({ Function }),
      Macro({ fg = syntax.macro }),
      sym("@function.macro")({ Macro }),
      Type({ fg = syntax.type, gui = "bold" }),
      Typedef({ Type }),
      Structure({ Type }),
      Enum({ Type }),
      sym("@type.builtin")({ Type }),
      Variable({ fg = syntax.variable }),
      sym("@variable")({ Variable }),
      sym("@variable.builtin")({ Variable }),
      Parameter({ fg = syntax.parameter }),
      sym("@variable.parameter")({ Parameter }),
      sym("@variable.parameter.builtin")({ Parameter }),
      Property({ fg = syntax.property }),
      sym("@variable.member")({ Property }),
      String({ fg = syntax.string }),
      Character({ String }),
      sym("@string.regexp")({ fg = colors.cyan }),
      sym("@string.special")({ fg = colors.magenta }),
      Punctuation({ fg = syntax.punctuation }),
      sym("@punctuation")({ Punctuation }),
      sym("@punctuation.special")({ Punctuation }),
      sym("@punctuation.bracket")({ Punctuation }),
      Constructor({ fg = syntax.constructor }),
      sym("@constructor")({ Constructor }),
      Module({ fg = colors.blue }),
      sym("@module")({ Module }),
      sym("@module.builtin")({ Module }),

      DiagnosticError({ Error }),
      DiagnosticWarn({ Warning }),
      DiagnosticInfo({ Information }),
      DiagnosticHint({ Hint }),
      DiagnosticOk({ Information }),

      CmpItemAbbrDeprecated({ Warning, gui = "strikethrough" }),
      CmpItemKind({ Structure }),
      CmpItemKindClass({ Structure }),
      CmpItemKindColor({ fg = colors.foreground }),
      CmpItemKindConstant({ Constant }),
      CmpItemKindConstructor({ Constructor }),
      CmpItemKindEnum({ Enum }),
      CmpItemKindEnumMember({ Constant }),
      CmpItemKindEvent({ Structure }),
      CmpItemKindField({ Field }),
      CmpItemKindFile({ File }),
      CmpItemKindFolder({ Directory }),
      CmpItemKindFunction({ Function }),
      CmpItemKindInterface({ Structure }),
      CmpItemKindKeyword({ Keyword }),
      CmpItemKindMethod({ Function }),
      CmpItemKindModule({ Module }),
      CmpItemKindOperator({ Operator }),
      CmpItemKindProperty({ Property }),
      CmpItemKindReference({ Keyword }),
      CmpItemKindSnippet({ fg = colors.foreground, gui = "italic" }),
      CmpItemKindStruct({ Structure }),
      CmpItemKindText({ Text }),
      CmpItemKindTypeParameter({ Parameter }),
      CmpItemKindUnit({ fg = colors.foreground }),
      CmpItemKindValue({ fg = colors.foreground }),
      CmpItemKindVariable({ Variable }),

      GitSignsStagedAdd({ Added, bg = colors.green }),
      GitSignsStagedAddLn({ fg = colors.grey6 }),
      GitSignsStagedAddNr({ Added, bg = colors.green }),
      GitSignsStagedAddCul({ Added, bg = colors.green }),
      GitSignsStagedChange({ Changed, bg = colors.yellow }),
      GitSignsStagedChangeLn({ fg = colors.grey6 }),
      GitSignsStagedChangeNr({ Changed, bg = colors.yellow }),
      GitSignsStagedChangedelete({ Changed, bg = colors.yellow }),
      GitSignsStagedChangedeleteLn({ fg = colors.grey6 }),
      GitSignsStagedChangeCul({ Changed, bg = colors.yellow }),
      GitSignsStagedChangedeleteCul({ Changed, bg = colors.yellow }),
      GitSignsStagedChangedeleteNr({ Changed, bg = colors.yellow }),
      GitSignsStagedDelete({ Removed, bg = colors.red }),
      GitSignsStagedTopdelete({ Removed, bg = colors.red }),
      GitSignsStagedDeleteNr({ Removed, bg = colors.red }),
      GitSignsStagedTopdeleteNr({ Removed, bg = colors.red }),
      GitSignsStagedDeleteCul({ Removed, bg = colors.red }),
      GitSignsStagedTopdeleteCul({ Removed, bg = colors.red }),

      MicroscopeMatch({ fg = colors.blue }),
      MicroscopeColor1({ fg = colors.red }),
      MicroscopeColor2({ fg = colors.green }),
      MicroscopeColor3({ Text }),
      MicroscopeColor4({ Text }),
      MicroscopeColor5({ Text }),
      MicroscopeColor6({ Text }),

      NeogitBranch({ fg = colors.blue }),
      NeogitBranchHead({ fg = colors.blue, gui = "underline" }),
      NeogitRemote({ fg = colors.green }),
      NeogitObjectId({ fg = colors.grey4 }),
      NeogitStash({ Unknown }),
      NeogitFold({ fg = colors.foreground }),
      NeogitRebaseDone({ Unknown }),
      NeogitTagName({ fg = colors.blue }),
      NeogitStatusHEAD({ fg = colors.foreground }),
      NeogitSectionHeader({ fg = colors.dark_red, gui = "bold" }),
      NeogitSectionHeaderCount({ fg = colors.foreground }),
      NeogitChangeModified({ Changed }),
      NeogitChangeAdded({ Added }),
      NeogitChangeDeleted({ Removed }),
      NeogitChangeRenamed({ fg = colors.blue }),
      NeogitChangeUpdated({ fg = colors.blue }),
      NeogitChangeCopied({ Added }),
      NeogitChangeNewFile({ Added }),
      NeogitChangeUnmerged({ fg = colors.magenta }),
      NeogitHunkHeader({ bg = colors.grey6, fg = colors.background }),
      NeogitHunkHeaderCursor({ bg = colors.dark_red, fg = colors.background }),
      NeogitHunkHeaderHighlight({ fg = colors.background, bg = colors.light_red, gui = "bold" }),
      NeogitDiffContext({ fg = colors.grey4 }),
      NeogitDiffContextCursor({}),
      NeogitDiffContextHighlight({ fg = colors.grey4 }),
      NeogitDiffAdd({ Added }),
      NeogitDiffAddCursor({ Added }),
      NeogitDiffAddHighlight({ Added }),
      NeogitDiffDelete({ Removed }),
      NeogitDiffDeleteCursor({ Removed }),
      NeogitDiffDeleteHighlight({ Removed }),

      TodoBgHACK({ fg = colors.background, bg = colors.orange, gui = "bold" }),
      TodoFgHACK({ fg = colors.orange }),
      TodoSignHACK({ fg = colors.orange }),
      TodoBgTEST({ fg = colors.background, bg = colors.blue, gui = "bold" }),
      TodoFgTEST({ fg = colors.blue }),
      TodoSignTEST({ fg = colors.blue }),
      TodoBgTODO({ fg = colors.background, bg = colors.green, gui = "bold" }),
      TodoFgTODO({ fg = colors.green }),
      TodoSignTODO({ fg = colors.green }),
      TodoBgFIX({ fg = colors.foreground, bg = colors.strong_red, gui = "bold" }),
      TodoFgFIX({ fg = colors.strong_red }),
      TodoSignFIX({ fg = colors.strong_red }),
      TodoBgPERF({ fg = colors.background, bg = colors.blue, gui = "bold" }),
      TodoFgPERF({ fg = colors.blue }),
      TodoSignPERF({ fg = colors.blue }),
      TodoBgNOTE({ fg = colors.background, bg = colors.magenta, gui = "bold" }),
      TodoFgNOTE({ fg = colors.magenta }),
      TodoSignNOTE({ fg = colors.magenta }),
      TodoBgWARN({ fg = colors.background, bg = colors.orange, gui = "bold" }),
      TodoFgWARN({ fg = colors.orange }),
      TodoSignWARN({ fg = colors.orange }),
    }
  end)
end

local lualine = {
  normal = {
    a = { fg = colors.background, bg = colors.green, gui = "bold" },
    b = { fg = colors.foreground, bg = colors.grey1 },
    c = { fg = colors.foreground, bg = colors.background_alt2 },
  },
  command = { a = { fg = colors.background, bg = colors.yellow, gui = "bold" } },
  insert = { a = { fg = colors.background, bg = colors.blue, gui = "bold" } },
  visual = { a = { fg = colors.background, bg = colors.magenta, gui = "bold" } },
  terminal = { a = { fg = colors.background, bg = colors.cyan, gui = "bold" } },
  replace = { a = { fg = colors.background, bg = colors.red, gui = "bold" } },
}

local barbecue = {
  normal = { fg = colors.grey8, bg = colors.background_alt2 },

  ellipsis = { fg = colors.grey4 },
  separator = { fg = colors.red },
  modified = { fg = colors.orange },

  dirname = { fg = colors.blue, bold = true },
  basename = { fg = colors.grey8, bold = true },
  context = { fg = colors.grey6 },

  context_file = { fg = colors.magenta },
  context_module = { fg = colors.magenta },
  context_namespace = { fg = colors.magenta },
  context_package = { fg = colors.magenta },
  context_class = { fg = colors.magenta },
  context_method = { fg = colors.magenta },
  context_property = { fg = colors.magenta },
  context_field = { fg = colors.magenta },
  context_constructor = { fg = colors.magenta },
  context_enum = { fg = colors.magenta },
  context_interface = { fg = colors.magenta },
  context_function = { fg = colors.magenta },
  context_variable = { fg = colors.magenta },
  context_constant = { fg = colors.magenta },
  context_string = { fg = colors.magenta },
  context_number = { fg = colors.magenta },
  context_boolean = { fg = colors.magenta },
  context_array = { fg = colors.magenta },
  context_object = { fg = colors.magenta },
  context_key = { fg = colors.magenta },
  context_null = { fg = colors.magenta },
  context_enum_member = { fg = colors.magenta },
  context_struct = { fg = colors.magenta },
  context_event = { fg = colors.magenta },
  context_operator = { fg = colors.magenta },
  context_type_parameter = { fg = colors.magenta },
}

return {
  colors = colors,
  syntax = syntax,
  lush = lush,
  lualine = lualine,
  barbecue = barbecue,
}
